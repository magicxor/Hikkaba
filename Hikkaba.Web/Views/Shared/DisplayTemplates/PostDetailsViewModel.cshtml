@using Hikkaba.Shared.Constants
@using Hikkaba.Shared.Extensions
@using Hikkaba.Shared.Services.Contracts
@using Hikkaba.Web.Utils.Url
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Hikkaba.Web.ViewModels.PostsViewModels.PostDetailsViewModel
@inject IUserContext UserContext

<div class="card @(Model.IsDeleted ? "bg-light" : "")">
  <span class="card-header fs-5">
    <div class="container">
      <div class="d-flex flex-wrap gap-2">
        @*User name*@
        <div class="post-header-flex-item">
          @(Defaults.AnonymousUserName)
        </div>

        @*User unique hash in this thread*@
        @if (Model.ShowThreadLocalUserHash)
        {
          <div class="post-header-flex-item">
            <span class="text-success" data-full-hash="@(Model.ThreadLocalUserHash)">@(Model.ThreadLocalUserHash.TryLeft(8))</span>
          </div>
        }

        @*Sage*@
        @if (Model.IsSageEnabled)
        {
          <div class="post-header-flex-item">
            <i class="bi bi-caret-down-fill" title="@Html.DisplayNameFor(model => model.IsSageEnabled)"></i>
          </div>
        }

        @*Post created at*@
        <div class="post-header-flex-item">
          @Html.DisplayFor(model => model.CreatedAt)
        </div>

        @*Post modified at*@
        @if (Model.ModifiedAt.HasValue)
        {
          <div class="post-header-flex-item">
            <span class="font-monospace">[</span><i class="bi bi-pencil" title="@Html.DisplayNameFor(model => model.ModifiedAt)" aria-hidden="true"></i> @Html.DisplayFor(model => model.ModifiedAt)<span class="font-monospace">]</span>
          </div>
        }

        @*Post ID*@
        <div class="post-header-flex-item">
          @*no extra spaces inside a*@
          <a id="@(Model.Id)" class="decoration-on-hover post-id-link" href="@PostUrlUtils.GetThreadDetailsPostUri(Model, Url)">@Html.DisplayFor(model => model.Id)</a>
        </div>

        @*Post sequence number in thread*@
        @if (Model.Index > 0)
        {
          <div class="post-header-flex-item">
            <span class="post-number">â„–@Html.DisplayFor(model => model.Index)</span>
          </div>
        }

        <div class="ms-auto">
          @if (Model.ShowCategoryAlias)
          {
            <a class="decoration-on-hover" href="@Url.RouteUrl("CategoryDetails", new { categoryAlias = Model.CategoryAlias })">
              <i class="bi bi-chevron-right"></i> /@Model.CategoryAlias
            </a>
          }
        </div>
      </div>
    </div>
  </span>
  <div class="card-body clearfix overflow-x-auto">
    @if (Context.User.Identity?.IsAuthenticated == true
         && UserContext.GetRequiredUser() is { } user
         && (user.ModeratedCategories.Contains(Model.CategoryId)
             || user.Roles.Contains(Defaults.AdministratorRoleName)))
    {
      <div class="row">
        <div class="col-md-12">
          <div class="d-grid gap-2 d-md-block thread-moderation-panel" role="group">
            @*todo: implement post edit*@
            @*
            <form asp-route="PostEdit" asp-route-categoryAlias="@Model.CategoryAlias" asp-route-threadId="@Model.ThreadId" asp-route-postId="@Model.Id" method="get" class="display-inline">
              <button type="submit" class="btn btn-outline-primary">
                <i class="bi bi-pencil" aria-hidden="true"></i>
                @("Edit")
              </button>
            </form>*@
            <form asp-route="PostSetDeleted" asp-route-postId="@Model.Id" method="post" class="display-inline">
              <input name="isDeleted" type="hidden" value="@((!Model.IsDeleted).ToString())"/>
              <input name="categoryAlias" type="hidden" value="@Model.CategoryAlias"/>
              <input name="threadId" type="hidden" value="@Model.ThreadId"/>
              <button type="submit" class="btn btn-outline-danger">
                <i class="@(Model.IsDeleted ? "bi bi-arrow-clockwise" : "bi bi-trash")" aria-hidden="true"></i>
                @(Model.IsDeleted ? "Restore" : "Delete")
              </button>
            </form>
            <form asp-route="BanCreate" method="get" class="display-inline">
              <input type="hidden" id="categoryAlias" name="categoryAlias" value="@Model.CategoryAlias"/>
              <input type="hidden" id="threadId" name="threadId" value="@Model.ThreadId"/>
              <input type="hidden" id="postId" name="postId" value="@Model.Id"/>
              <button type="submit" class="btn btn-outline-dark">
                <i class="bi bi-ban" aria-hidden="true"></i>
                @("Ban")
              </button>
            </form>
          </div>
        </div>
      </div>
    }
    @if (Model.Audio.Any()
         || Model.Documents.Any()
         || Model.Notices.Any()
         || Model.Pictures.Any()
         || Model.Video.Any())
    {
      // if attachment count is > 1, show post message under attachments
      // otherwise show post message next to the attachment
      <div class="@(Model.GetAttachmentCount() > 1 ? "container" : "float-start me-3 mb-2")">
        <div class="d-flex flex-wrap gap-3">
          @Html.DisplayFor(model => model.Audio)
          @Html.DisplayFor(model => model.Documents)
          @Html.DisplayFor(model => model.Notices)
          @Html.DisplayFor(model => model.Pictures)
          @Html.DisplayFor(model => model.Video)
        </div>
      </div>
    }
    <span class="post-msg-text visible-line-breaks">@Html.Raw(Model.MessageHtml)</span>
  </div>
  @if (Model.Replies.Any())
  {
    <div class="card-footer">
      <ul class="list-inline m-0">
        <li class="list-inline-item">@Html.DisplayNameFor(model => model.Replies):</li>
        @foreach (var replyId in Model.Replies)
        {
          <li class="list-inline-item">
            @Html.RouteLink(
              $">>{replyId}",
              "ThreadDetails",
              null,
              null,
              replyId.ToString(),
              new { categoryAlias = Model.CategoryAlias, threadId = Model.ThreadId },
              new {@class="decoration-on-hover"})
          </li>
        }
      </ul>
    </div>
  }
</div>
