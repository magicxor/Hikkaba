@using Hikkaba.Shared.Constants
@using Hikkaba.Shared.Models
@using Hikkaba.Shared.Services.Contracts
@using Hikkaba.Web.Utils.Url
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Hikkaba.Web.ViewModels.ThreadsViewModels.ThreadDetailsViewModel
@inject IUserContext UserContext

<div class="row">
  <div class="col-md-12">
    <div class="card">
      <div class="card-body">
        <span class="fs-5">
          <a class="decoration-on-hover inherit-color" href="@ThreadUrlUtils.GetThreadDetailsUri(Model, Url)"><b>@Model.Title</b></a>
          &nbsp;
          @Model.PostCount posts
          &nbsp;
          @Html.DisplayFor(model => model.CreatedAt)
          &nbsp;
          <a class="decoration-on-hover" href="@ThreadUrlUtils.GetThreadDetailsUri(Model, Url)">@Model.Id</a>
          @if (Model.IsPinned)
          {
            <span>&nbsp;</span>
            <i class="bi bi-pin" title="@Html.DisplayNameFor(model => model.IsPinned)"></i>
          }
          @if (Model.IsClosed)
          {
            <span>&nbsp;</span>
            <i class="bi bi-lock" title="@Html.DisplayNameFor(model => model.IsClosed)"></i>
          }
          @if (Model.IsCyclic)
          {
            <span>&nbsp;</span>
            <i class="bi bi-infinity" title="@Html.DisplayNameFor(model => model.IsCyclic)"></i>
          }
        </span>
        @if (Context.User.Identity?.IsAuthenticated == true
             && UserContext.GetRequiredUser() is { } user
             && (user.Roles.Contains(Defaults.AdministratorRoleName) || user.ModeratedCategories.Contains(Model.CategoryId)))
        {
          <div class="row">
            <div class="col-md-12">
              <div class="d-grid gap-2 d-md-block thread-moderation-panel" role="group">
                <form asp-route="ThreadEdit" asp-route-threadId="@Model.Id" method="get" class="display-inline">
                  <button type="submit" class="btn btn-outline-dark">
                    <i class="bi-pencil" aria-hidden="true"></i>
                    Edit
                  </button>
                </form>
                <form asp-route="ThreadSetPinned" asp-route-threadId="@Model.Id" method="post" class="display-inline">
                  <input name="isPinned" type="hidden" value="@((!Model.IsPinned).ToString())"/>
                  <input name="categoryAlias" type="hidden" value="@(Model.CategoryAlias)"/>
                  <button type="submit" class="btn @(Model.IsPinned ? "btn-outline-primary" : "btn-outline-dark")">
                    <i class="@(Model.IsPinned ? "bi bi-arrow-down" : "bi bi-pin")" aria-hidden="true"></i>
                    @(Model.IsPinned ? "Unpin" : "Pin")
                  </button>
                </form>
                <form asp-route="ThreadSetCyclic" asp-route-threadId="@Model.Id" method="post" class="display-inline">
                  <input name="isCyclic" type="hidden" value="@((!Model.IsCyclic).ToString())"/>
                  <input name="categoryAlias" type="hidden" value="@(Model.CategoryAlias)"/>
                  <button type="submit" class="btn @(Model.IsCyclic ? "btn-outline-primary" : "btn-outline-dark")">
                    <i class="@(Model.IsCyclic ? "bi bi-align-center" : "bi bi-infinity")" aria-hidden="true"></i>
                    @(Model.IsCyclic ? "Make Linear" : "Make Cyclic")
                  </button>
                </form>
                <form asp-route="ThreadSetClosed" asp-route-threadId="@Model.Id" method="post" class="display-inline">
                  <input name="isClosed" type="hidden" value="@((!Model.IsClosed).ToString())"/>
                  <input name="categoryAlias" type="hidden" value="@(Model.CategoryAlias)"/>
                  <button type="submit" class="btn @(Model.IsClosed ? "btn-outline-primary" : "btn-outline-dark")">
                    <i class="@(Model.IsClosed ? "bi bi-unlock" : "bi bi-lock")" aria-hidden="true"></i>
                    @(Model.IsClosed ? "Open" : "Close")
                  </button>
                </form>
                <form asp-route="ThreadSetDeleted" asp-route-threadId="@Model.Id" method="post" class="display-inline">
                  <input name="isDeleted" type="hidden" value="@((!Model.IsDeleted).ToString())"/>
                  <input name="categoryAlias" type="hidden" value="@(Model.CategoryAlias)"/>
                  <button type="submit" class="btn @(Model.IsDeleted ? "btn-outline-primary" : "btn-outline-danger")">
                    <i class="@(Model.IsDeleted ? "bi bi-arrow-counterclockwise" : "bi bi-trash")" aria-hidden="true"></i>
                    @(Model.IsDeleted ? "Restore" : "Delete")
                  </button>
                </form>
              </div>
            </div>
          </div>
        }
        @if (Model.Posts.Any())
        {
          <div class="container">
            @for (var i = 0; i < Model.Posts.Count; i++)
            {
              <div class="mt-3 mb-1">
                @Html.DisplayFor(m => m.Posts[i])
              </div>

              @if (i == 0 && Model.PostCount > Model.Posts.Count)
              {
                <div class="mt-2 mb-0">
                  <div class="alert alert-light m-0 pt-1 pb-1" role="alert">
                    @(Model.PostCount - Model.Posts.Count) replies omitted. <a class="alert-link decoration-on-hover" href="@ThreadUrlUtils.GetThreadDetailsUri(Model, Url)">Click here</a> to view.
                  </div>
                </div>
              }
            }
          </div>
        }
      </div>
    </div>
  </div>
</div>
