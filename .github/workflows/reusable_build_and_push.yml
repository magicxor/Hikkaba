# documentation:
# Environments -> Environment secrets: https://docs.github.com/en/actions/learn-github-actions/contexts#secrets-context
# Environments -> Environment variables: https://docs.github.com/actions/learn-github-actions/contexts#vars-context
# Secrets in reusable workflows: https://colinsalmcorner.com/consuming-environment-secrets-in-reusable-workflows/
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: environment to deploy to
        required: false

name: Build and push (reusable workflow)

jobs:
  build_and_push:
    name: Build and push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine and Validate Git Tag
        id: get_semver_tag
        run: |
          # Extract the tag name from the full git ref (e.g., refs/tags/1.2.3-rc.1 -> 1.2.3-rc.1)
          FULL_TAG="${GITHUB_REF#refs/tags/}"
          echo "Detected tag: $FULL_TAG"

          # Define a regex pattern for basic SemVer 2.0 validation (X.Y.Z[-prerelease][+buildmetadata])
          SEMVER_REGEX='^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$'

          # Validate the extracted tag against the SemVer regex
          if ! echo "$FULL_TAG" | grep -Eq "$SEMVER_REGEX"; then
            # If the tag does not match the regex, print an error and exit with a non-zero status code
            echo "Error: Tag '$FULL_TAG' is not a valid SemVer 2.0 format."
            exit 1
          fi

          # Extract the core version (X.Y.Z) by removing the shortest suffix starting with '-' or '+'
          CORE_VERSION="${FULL_TAG%%[-+]*}"

          # Determine if the tag is a pre-release or build version (contains '-' or '+')
          IS_PRE_RELEASE="false"
          if [[ "$FULL_TAG" != "$CORE_VERSION" ]]; then
            IS_PRE_RELEASE="true"
          fi

          echo "Validation successful."
          echo "Full tag: $FULL_TAG"
          echo "Core version: $CORE_VERSION"
          echo "Is pre-release/build: $IS_PRE_RELEASE"

          # Set the outputs for use in subsequent steps in the workflow
          echo "full_tag=$FULL_TAG" >> $GITHUB_OUTPUT
          echo "core_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "is_pre_release=$IS_PRE_RELEASE" >> $GITHUB_OUTPUT

      # This step determines the appropriate Docker tags based on whether it's a pre-release or stable tag
      - name: Determine Docker Tags
        id: determine_tags
        run: |
          # Retrieve outputs from the previous step
          FULL_TAG="${{ steps.get_semver_tag.outputs.full_tag }}"
          IS_PRE_RELEASE="${{ steps.get_semver_tag.outputs.is_pre_release }}"
          DOCKER_IMAGE_BASE="${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}"

          # Initialize an empty variable for tags
          DOCKER_TAGS=""

          if [[ "$IS_PRE_RELEASE" == "true" ]]; then
            # If it's a pre-release, use :latest-preview and :<full_tag>
            echo "Pre-release tag detected. Using 'latest-preview' and full tag."
            DOCKER_TAGS=$(cat <<EOF
          ${DOCKER_IMAGE_BASE}:latest-preview
          ${DOCKER_IMAGE_BASE}:${FULL_TAG}
          EOF
          )
          else
            # If it's a stable release, use :latest and :<full_tag> (which is the same as core_version here)
            echo "Stable release tag detected. Using 'latest' and full tag."
            DOCKER_TAGS=$(cat <<EOF
          ${DOCKER_IMAGE_BASE}:latest
          ${DOCKER_IMAGE_BASE}:${FULL_TAG}
          EOF
          )
          fi

          # Output the determined tags for the build-push action
          # Using EOF heredoc for multi-line output
          echo "docker_tags<<EOF" >> $GITHUB_OUTPUT
          echo "$DOCKER_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # https://github.com/docker/build-push-action
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Hikkaba.Web/Dockerfile
          cache-from: type=registry,ref=${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}:cache
          cache-to: type=registry,ref=${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}:cache,mode=max,compression=zstd,oci-mediatypes=true
          build-args: |
            ASSEMBLY_VERSION=${{ steps.get_semver_tag.outputs.CORE_VERSION }}
            PRODUCT_VERSION=${{ steps.get_semver_tag.outputs.FULL_TAG }}
          tags: ${{ steps.determine_tags.outputs.docker_tags }}
          platforms: |
            linux/amd64
