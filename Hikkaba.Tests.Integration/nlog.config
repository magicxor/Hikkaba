<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off"
      internalLogFile="C:\temp\internal-nlog.txt">

    <extensions>
        <!-- Enable asp.net core layout renderers -->
        <add assembly="NLog.Web.AspNetCore" />
    </extensions>

    <targets async="true">
        <target xsi:type="Null" name="blackHole" />

        <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
        <target name="lifetimeConsole"
                xsi:type="Console"
                layout="${level:truncate=4:tolower=true}: ${logger}[0]${newline}      ${message}${exception:format=tostring}" />

        <target name="logfile"
                xsi:type="File"
                layout="${longdate} ${uppercase:${level}} ${message} ${exception:format=tostring}; url = ${aspnet-request-url:IncludeQueryString=true}; ip = ${aspnet-request-ip:CheckForwardedForHeader=true}; controller = ${aspnet-mvc-controller}; action = ${aspnet-mvc-action}; method = ${aspnet-request-method}; logger = ${logger}; auth = ${aspnet-user-isauthenticated}; identity = ${aspnet-user-identity}; traceId = ${aspnet-TraceIdentifier}; WorkingSet64 = ${processinfo:property=WorkingSet64}; status = ${aspnet-response-statuscode}"
                fileName="${basedir}/logs/Log.current.txt"
                archiveFileName="${basedir}/logs/archives/Log.{#}.txt"
                archiveEvery="Day"
                archiveNumbering="DateAndSequence"
                archiveDateFormat="yyyyMMdd"
                archiveAboveSize="5242880"
                maxArchiveFiles="9" />

        <target name="consoleout"
                xsi:type="Console"
                layout="${longdate} ${uppercase:${level}} ${message} ${exception:format=tostring}; url = ${aspnet-request-url:IncludeQueryString=true}; ip = ${aspnet-request-ip:CheckForwardedForHeader=true}; controller = ${aspnet-mvc-controller}; action = ${aspnet-mvc-action}; method = ${aspnet-request-method}; logger = ${logger}; auth = ${aspnet-user-isauthenticated}; identity = ${aspnet-user-identity}; traceId = ${aspnet-TraceIdentifier}; WorkingSet64 = ${processinfo:property=WorkingSet64}; status = ${aspnet-response-statuscode}" />
    </targets>

    <rules>
        <logger ruleName="AllToFile" name="*" minlevel="Info" writeTo="logfile">
            <filters defaultAction="Log">
                <when condition="starts-with(logger,'Microsoft.EntityFrameworkCore.') and level &lt; LogLevel.Warn" action="Ignore" />
                <when condition="equals('${event-properties:item=EventId}',99150001) and level &lt; LogLevel.Warn" action="Ignore" />
                <when condition="starts-with(logger,'System.Net.Http.HttpClient.Telegram.') and level &lt; LogLevel.Warn" action="Ignore" />
            </filters>
        </logger>

        <logger ruleName="AllToConsole" name="*" minlevel="Info" writeTo="consoleout">
            <filters defaultAction="Log">
                <when condition="starts-with(logger,'Microsoft.EntityFrameworkCore.') and level &lt; LogLevel.Warn" action="Ignore" />
                <when condition="equals('${event-properties:item=EventId}',99150001) and level &lt; LogLevel.Warn" action="Ignore" />
                <when condition="starts-with(logger,'System.Net.Http.HttpClient.Telegram.') and level &lt; LogLevel.Warn" action="Ignore" />
            </filters>
        </logger>

        <!--Output hosting lifetime messages to make Docker / Visual Studio happy (see https://github.com/NLog/NLog.Web/wiki/Hosting-Lifetime-Startup-Messages) -->
        <logger ruleName="MicrosoftHostingLifetimeToConsole" name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole" final="true" />
    </rules>
</nlog>
