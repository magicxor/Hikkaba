// <auto-generated />
using System;
using Hikkaba.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hikkaba.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250330031106_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hikkaba.Data.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Base.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<Guid>("BlobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlobId")
                        .IsUnique();

                    b.ToTable("Attachments");

                    b.HasDiscriminator<int>("AttachmentType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("AutonomousSystemNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("AutonomousSystemOrganization")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("BannedCidrLowerIpAddress")
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("BannedCidrUpperIpAddress")
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("BannedIpAddress")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CountryIsoCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IpAddressType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("RelatedPostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BannedCidrLowerIpAddress");

                    b.HasIndex("BannedCidrUpperIpAddress");

                    b.HasIndex("BannedIpAddress");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryIsoCode");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EndsAt");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RelatedPostId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DefaultBumpLimit")
                        .HasColumnType("int");

                    b.Property<bool>("DefaultShowThreadLocalUserHash")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.HasIndex("BoardId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.CategoryToModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ModeratorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ModeratorId");

                    b.ToTable("CategoriesToModerators");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("BlobContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSageEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MessageHtml")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<long>("ThreadId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("UserIpAddress")
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("BlobContainerId")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IsSageEnabled");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ThreadId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.PostToReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReplyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReplyId");

                    b.ToTable("PostToReply");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Thread", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BumpLimit")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<bool>("ShowThreadLocalUserHash")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IsPinned");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<DateOnly>", b =>
                {
                    b.Property<DateOnly>("Column1")
                        .HasColumnType("date");

                    b.ToTable("#TempTable<DateOnly>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<DateOnly?>", b =>
                {
                    b.Property<DateOnly?>("Column1")
                        .HasColumnType("date");

                    b.ToTable("#TempTable<DateOnly?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<DateTime>", b =>
                {
                    b.Property<DateTime>("Column1")
                        .HasColumnType("datetime2");

                    b.ToTable("#TempTable<DateTime>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<DateTime?>", b =>
                {
                    b.Property<DateTime?>("Column1")
                        .HasColumnType("datetime2");

                    b.ToTable("#TempTable<DateTime?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<DateTimeOffset>", b =>
                {
                    b.Property<DateTimeOffset>("Column1")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("#TempTable<DateTimeOffset>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<DateTimeOffset?>", b =>
                {
                    b.Property<DateTimeOffset?>("Column1")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("#TempTable<DateTimeOffset?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<Guid>", b =>
                {
                    b.Property<Guid>("Column1")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("#TempTable<Guid>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<Guid?>", b =>
                {
                    b.Property<Guid?>("Column1")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("#TempTable<Guid?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<TimeOnly>", b =>
                {
                    b.Property<TimeOnly>("Column1")
                        .HasColumnType("time");

                    b.ToTable("#TempTable<TimeOnly>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<TimeOnly?>", b =>
                {
                    b.Property<TimeOnly?>("Column1")
                        .HasColumnType("time");

                    b.ToTable("#TempTable<TimeOnly?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<TimeSpan>", b =>
                {
                    b.Property<TimeSpan>("Column1")
                        .HasColumnType("time");

                    b.ToTable("#TempTable<TimeSpan>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<TimeSpan?>", b =>
                {
                    b.Property<TimeSpan?>("Column1")
                        .HasColumnType("time");

                    b.ToTable("#TempTable<TimeSpan?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<bool>", b =>
                {
                    b.Property<bool>("Column1")
                        .HasColumnType("bit");

                    b.ToTable("#TempTable<bool>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<bool?>", b =>
                {
                    b.Property<bool?>("Column1")
                        .HasColumnType("bit");

                    b.ToTable("#TempTable<bool?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<byte>", b =>
                {
                    b.Property<byte>("Column1")
                        .HasColumnType("tinyint");

                    b.ToTable("#TempTable<byte>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<byte?>", b =>
                {
                    b.Property<byte?>("Column1")
                        .HasColumnType("tinyint");

                    b.ToTable("#TempTable<byte?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<decimal>", b =>
                {
                    b.Property<decimal>("Column1")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("#TempTable<decimal>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<decimal?>", b =>
                {
                    b.Property<decimal?>("Column1")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("#TempTable<decimal?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<double>", b =>
                {
                    b.Property<double>("Column1")
                        .HasColumnType("float");

                    b.ToTable("#TempTable<double>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<double?>", b =>
                {
                    b.Property<double?>("Column1")
                        .HasColumnType("float");

                    b.ToTable("#TempTable<double?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<float>", b =>
                {
                    b.Property<float>("Column1")
                        .HasColumnType("real");

                    b.ToTable("#TempTable<float>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<float?>", b =>
                {
                    b.Property<float?>("Column1")
                        .HasColumnType("real");

                    b.ToTable("#TempTable<float?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<int>", b =>
                {
                    b.Property<int>("Column1")
                        .HasColumnType("int");

                    b.ToTable("#TempTable<int>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<int?>", b =>
                {
                    b.Property<int?>("Column1")
                        .HasColumnType("int");

                    b.ToTable("#TempTable<int?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<long>", b =>
                {
                    b.Property<long>("Column1")
                        .HasColumnType("bigint");

                    b.ToTable("#TempTable<long>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<long?>", b =>
                {
                    b.Property<long?>("Column1")
                        .HasColumnType("bigint");

                    b.ToTable("#TempTable<long?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<short>", b =>
                {
                    b.Property<short>("Column1")
                        .HasColumnType("smallint");

                    b.ToTable("#TempTable<short>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<short?>", b =>
                {
                    b.Property<short?>("Column1")
                        .HasColumnType("smallint");

                    b.ToTable("#TempTable<short?>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Thinktecture:TempTable:Thinktecture.EntityFrameworkCore.TempTables.TempTable<string>", b =>
                {
                    b.Property<string>("Column1")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("#TempTable<string>", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Audio", b =>
                {
                    b.HasBaseType("Hikkaba.Data.Entities.Attachments.Base.Attachment");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("FileHash")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)");

                    b.Property<string>("FileNameWithoutExtension")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("FileSize")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasIndex("PostId");

                    b.ToTable("Attachments");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Document", b =>
                {
                    b.HasBaseType("Hikkaba.Data.Entities.Attachments.Base.Attachment");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("FileHash")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)");

                    b.Property<string>("FileNameWithoutExtension")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("FileSize")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasIndex("PostId");

                    b.ToTable("Attachments");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Notice", b =>
                {
                    b.HasBaseType("Hikkaba.Data.Entities.Attachments.Base.Attachment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PostId");

                    b.ToTable("Attachments");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Picture", b =>
                {
                    b.HasBaseType("Hikkaba.Data.Entities.Attachments.Base.Attachment");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("FileHash")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)");

                    b.Property<string>("FileNameWithoutExtension")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("FileSize")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.ToTable("Attachments");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Video", b =>
                {
                    b.HasBaseType("Hikkaba.Data.Entities.Attachments.Base.Attachment");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("FileHash")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)");

                    b.Property<string>("FileNameWithoutExtension")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("FileSize")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasIndex("PostId");

                    b.ToTable("Attachments");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Ban", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany("CreatedBans")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "ModifiedBy")
                        .WithMany("ModifiedBans")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Hikkaba.Data.Entities.Post", "RelatedPost")
                        .WithMany()
                        .HasForeignKey("RelatedPostId");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("RelatedPost");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Category", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Board", "Board")
                        .WithMany("Categories")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany("CreatedCategories")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "ModifiedBy")
                        .WithMany("ModifiedCategories")
                        .HasForeignKey("ModifiedById");

                    b.Navigation("Board");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.CategoryToModerator", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Category", "Category")
                        .WithMany("Moderators")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "Moderator")
                        .WithMany("ModerationCategories")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Post", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "ModifiedBy")
                        .WithMany("ModifiedPosts")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Hikkaba.Data.Entities.Thread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.PostToReply", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hikkaba.Data.Entities.Post", "Reply")
                        .WithMany("ParentPosts")
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Thread", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Category", "Category")
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Audio", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Post", "Post")
                        .WithMany("Audios")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Document", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Post", "Post")
                        .WithMany("Documents")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Notice", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany("CreatedNotices")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hikkaba.Data.Entities.Post", "Post")
                        .WithMany("Notices")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Picture", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Post", "Post")
                        .WithMany("Pictures")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Attachments.Video", b =>
                {
                    b.HasOne("Hikkaba.Data.Entities.Post", "Post")
                        .WithMany("Videos")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CreatedBans");

                    b.Navigation("CreatedCategories");

                    b.Navigation("CreatedNotices");

                    b.Navigation("CreatedPosts");

                    b.Navigation("ModerationCategories");

                    b.Navigation("ModifiedBans");

                    b.Navigation("ModifiedCategories");

                    b.Navigation("ModifiedPosts");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Board", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Category", b =>
                {
                    b.Navigation("Moderators");

                    b.Navigation("Threads");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Post", b =>
                {
                    b.Navigation("Audios");

                    b.Navigation("Documents");

                    b.Navigation("Notices");

                    b.Navigation("ParentPosts");

                    b.Navigation("Pictures");

                    b.Navigation("Replies");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Hikkaba.Data.Entities.Thread", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
